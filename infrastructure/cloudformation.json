{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Forecast flight delays with Amazon Sagemaker",
    "Parameters": {
        "Region": {
            "Type": "String",
            "Default": "us-west-2"
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "10.0.0.0/20"
            },
            "DevSubnet": {
                "CIDR": "10.0.0.0/24",
                "AZ": "us-west-2a"
            }
        },
        "UserConfig": {
            "Login": {
                "Name": "student",
                "Pass": "password"
            }
        }
    },
    "Resources": {
        "LabData": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "AccessControl": "PublicRead"
            }
        },
        "S3Copy": {
            "Type": "Custom::CopyToS3",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CopyFilesToS3",
                        "Arn"
                    ]
                },
                "S3BucketName": {
                    "Ref": "LabData"
                },
                "SourceBucket": "clouda-labs-assets",
                "Objects": [
                    "sagemaker/flight_data/Flights_test.csv",
                    "sagemaker/flight_data/Flights_training.csv"
                ]
            }
        },
        "CopyFilesToS3": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Handler": "index.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import os",
                                "import json",
                                "import boto3",
                                "import cfnresponse",
                                "",
                                "print('Loading function')",
                                "",
                                "s3 = boto3.resource('s3')",
                                "",
                                "",
                                "def copy_to_s3(key, source_bucket, bucket):",
                                "    copy_source = { 'Bucket': source_bucket, 'Key': key }",
                                "    dest_bucket = s3.Bucket(bucket)",
                                "    dest_object = dest_bucket.Object(os.path.basename(key))",
                                "    dest_object.copy(copy_source)",
                                "",
                                "",
                                "def lambda_handler(event, context):",
                                "    print('Received event: ' + json.dumps(event, indent=2))",
                                "",
                                "    if event['RequestType'] == 'Create':",
                                "        # get the properties set in the CloudFormation resource",
                                "        properties = event['ResourceProperties']",
                                "        objects = properties['Objects']",
                                "        bucket = properties['S3BucketName']",
                                "        source_bucket = properties['SourceBucket']",
                                "",
                                "        try:",
                                "            for key in objects:",
                                "                copy_to_s3(key, source_bucket, bucket)",
                                "",
                                "        except Exception as e:",
                                "            print(e)",
                                "            cfnresponse.send(event, context, cfnresponse.FAILED, {",
                                "                             'Response': 'Failure'})",
                                "            return",
                                "",
                                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Response': 'Success'})"
                            ]
                        ]
                    }
                },
                "Runtime": "python3.6",
                "Timeout": 120
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:PutObject"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "SageMakerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "sagemaker.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "sagemaker",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudwatch:PutMetricData",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "logs:CreateLogGroup",
                                        "logs:DescribeLogStreams",
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:ListBucket",
                                        "ecr:GetAuthorizationToken",
                                        "ecr:BatchCheckLayerAvailability",
                                        "ecr:GetDownloadUrlForLayer",
                                        "ecr:BatchGetImage"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ],
                "RoleName": "sagemaker-role"
            }
        },
        "Cloud9Env": {
            "Type": "AWS::Cloud9::EnvironmentEC2",
            "DependsOn": "User",
            "Properties": {
                "Description": "Test Machine",
                "AutomaticStopTimeMinutes": 60,
                "InstanceType": "t2.micro",
                "OwnerArn": {
                    "Fn::Join": [
                        "",
                        [
                            "arn:aws:iam::",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":user/student"
                        ]
                    ]
                },
                "Name": "Test",
                "SubnetId": {
                    "Ref": "DevSubnet"
                }
            }
        },
        "DevVpc": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "VPC",
                        "CIDR"
                    ]
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Dev Vpc"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "DevSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "DevSubnet",
                        "AZ"
                    ]
                },
                "CidrBlock": {
                    "Fn::FindInMap": [
                        "SubnetConfig",
                        "DevSubnet",
                        "CIDR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Dev Subnet"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "DevInternetGatewayAttach": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "InternetGatewayId": {
                    "Ref": "DevInternetGateway"
                }
            }
        },
        "DevPublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "DevVpc"
                }
            }
        },
        "DevPublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "DevPublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "DevInternetGateway"
                }
            }
        },
        "DevSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DevSubnet"
                },
                "RouteTableId": {
                    "Ref": "DevPublicRouteTable"
                }
            }
        },
        "DevInternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "DevSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow incoming http and ssh traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "DevVpc"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Dev Servers"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Dev"
                    }
                ]
            }
        },
        "Group": {
            "Type": "AWS::IAM::Group",
            "Properties": {
                "GroupName": "Students",
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "students-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sagemaker:CreateModel",
                                        "sagemaker:Describe*",
                                        "sagemaker:DeleteModel",
                                        "sagemaker:Get*",
                                        "sagemaker:List*",
                                        "sagemaker:Search",
                                        "sagemaker:DeleteTags",
                                        "sagemaker:StopTrainingJob",
                                        "sagemaker:AddTags",
                                        "sagemaker:CreateTrainingJob",
                                        "sagemaker:CreateEndpointConfig",
                                        "sagemaker:CreateEndpoint",
                                        "sagemaker:DeleteEndpoint",
                                        "s3:Get*",
                                        "s3:List*",
                                        "s3:PutObjectAcl",
                                        "s3:PutBucketAcl",
                                        "s3:PutBucketPolicy",
                                        "cloudwatch:List*",
                                        "cloudwatch:Describe*",
                                        "cloudwatch:Get*",
                                        "logs:List*",
                                        "logs:Describe*",
                                        "logs:Get*",
                                        "logs:Filter*",
                                        "cloud9:DescribeEnvironments",
                                        "cloud9:ListEnvironments",
                                        "cloud9:GetUserPublicKey",
                                        "cloud9:GetUserSettings",
                                        "cloud9:GetEnvironmentConfig",
                                        "cloud9:UpdateUserSettings",
                                        "cloud9:ValidateEnvironmentName",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeVpcs",
                                        "iam:GetUser",
                                        "iam:ListUsers"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloud9:DescribeEnvironmentMemberships"
                                    ],
                                    "Resource": "*",
                                    "Condition": {
                                        "Null": {
                                            "cloud9:UserArn": "true",
                                            "cloud9:EnvironmentId": "true"
                                        }
                                    }
                                },
                                {
                                    "Action": [
                                        "ec2:Describe*"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow",
                                    "Condition": {
                                        "StringEquals": {
                                            "ec2:Region": "us-west-2"
                                        }
                                    }
                                },
                                {
                                    "Sid": "VpcConfigurationForCreateForms",
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeVpcs",
                                        "ec2:DescribeSubnets",
                                        "ec2:DescribeSecurityGroups"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "ListRoles",
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:ListRoles"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Sid": "KmsKeysForCreateForms",
                                    "Effect": "Allow",
                                    "Action": [
                                        "kms:DescribeKey",
                                        "kms:ListAliases"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": "arn:aws:iam::*:role/sagemaker-role",
                                    "Condition": {
                                        "StringEquals": {
                                            "iam:PassedToService": "sagemaker.amazonaws.com"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "User": {
            "Type": "AWS::IAM::User",
            "DependsOn": "Group",
            "Properties": {
                "LoginProfile": {
                    "Password": {
                        "Fn::FindInMap": [
                            "UserConfig",
                            "Login",
                            "Pass"
                        ]
                    }
                },
                "Path": "/",
                "Groups": [
                    "Students"
                ],
                "UserName": {
                    "Fn::FindInMap": [
                        "UserConfig",
                        "Login",
                        "Name"
                    ]
                }
            }
        }
    }
}